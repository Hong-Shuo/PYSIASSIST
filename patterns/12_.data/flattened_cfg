digraph cluster_main {
	graph [label=main]
	subgraph cluster_mod {
		label=mod
		1 [label="block:1@1
def update1(x)::Line 1
def update2(x)::Line 7
A = torch.randn(6, 6, requires_grad=False):Line 13
b = torch.randn(6, 1, requires_grad=False):Line 14
x = torch.randn(6, 1, requires_grad=True):Line 17
"]
		12 [label="block:12@19
for i in range(40000)::Line 19
"]
		13 [label="block:13@20
loss = torch.norm(A @ x - b):Line 20
loss.backward():Line 21
x = update1(x):Line 22
x = update2(x):Line 23
if not i % 5000::Line 24
"]
		15 [label="block:15@24
print(f'{loss: >.6f}    {x}'):Line 24
"]
		15 -> 12
		13 -> 15 [label=<ast.UnaryOp object at 0x000001F552C9E290>]
		13 -> 12 [label=<ast.UnaryOp object at 0x000001F552C9F550>]
		12 -> 13 [label=<ast.Call object at 0x000001F552C9E830>]
		1 -> 12
	}
	subgraph cluster_mod_update1 {
		label="mod.update1"
		3 [label="block:3@2
with torch.no_grad()::Line 2
"]
		4 [label="block:4@3
tmp = x - 0.0001 * x.grad:Line 3
"]
		5 [label="block:5@4
x.grad.zero_():Line 4
return tmp.requires_grad_(True):Line 5
"]
		4 -> 5
		3 -> 4
	}
	subgraph cluster_mod_update2 {
		label="mod.update2"
		9 [label="block:9@8
x.data -= 0.0001 * x.grad.data:Line 8
x.grad.data.zero_():Line 9
return x:Line 10
"]
	}
}
