digraph cluster_main {
	graph [label=main]
	subgraph cluster_mod {
		label=mod
		1 [label="block:1@1
class lstm_char(nn.Module)::Line 1
lstm_char():Line 29
"]
	}
	subgraph cluster_mod_lstm_char {
		label="mod.lstm_char"
		3 [label="block:3@2
def __init__(self, unique_input_tokens, inputsize, hiddensize, outputsize,    num_layer, dropout_prob=0.2)::Line 2
def forward(self, x, hidden)::Line 19
"]
	}
	subgraph cluster_mod_lstm_char___init__ {
		label="mod.lstm_char.__init__"
		5 [label="block:5@3
super().__init__():Line 3
self.hiddensize = hiddensize:Line 5
self.num_layer = num_layer:Line 6
self.int2char = dict(enumerate(unique_input_tokens)):Line 7
self.char2int = {char: int for int, char in int2char.items()}:Line 8
self.lstm = nn.LSTM(input_size=inputsize, hidden_size=hiddensize,    num_layers=num_layer, batch_first=True, dropout=dropout_prob):Line 10
self.dropout = nn.Dropout2d(dropout_prob):Line 16
self.fc = nn.Linear(hiddensize, outputsize):Line 17
"]
	}
	subgraph cluster_mod_lstm_char_forward {
		label="mod.lstm_char.forward"
		8 [label="block:8@20
\"\"\"        hidden contains hiddenstate and cellstate        \"\"\":Line 20
output, hidden = self.lstm(x, hidden):Line 23
output = self.dropout(output):Line 25
output = output.contiguous().view(-1, self.hiddensize):Line 26
output = self.fc(output):Line 27
return output, hidden:Line 28
"]
	}
}
